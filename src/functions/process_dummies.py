import streamlit as st
import pandas as pd
from sklearn.base import BaseEstimator, TransformerMixin

def criar_dummies_dataframe(df):
    """
    Fun√ß√£o para criar vari√°veis dummy (one-hot encoding) com interface Streamlit.
    Mostra os 5 primeiros registros ap√≥s gravar/desfazer.
    """
    # Inicializa estados da sess√£o
    if 'df_original_dummies' not in st.session_state:
        st.session_state.df_original_dummies = df.copy()
    if 'show_preview' not in st.session_state:
        st.session_state.show_preview = False
    
    # Bot√£o de explica√ß√£o
    with st.expander("‚ÑπÔ∏è Como funcionam as vari√°veis dummy?"):
        st.markdown("""
        **Vari√°veis dummy (one-hot encoding)** transformam categorias em colunas bin√°rias.
        Cada categoria vira uma nova coluna com valores 0 ou 1.
        """)
    
    # Selecionar colunas categ√≥ricas
    colunas_categoricas = df.select_dtypes(include=['object', 'category']).columns.tolist()
    
    if not colunas_categoricas:
        st.session_state.dummies = True
        return df
    
    colunas_selecionadas = st.multiselect(
        "Selecione as colunas para criar dummy:",
        options=colunas_categoricas,
        default=colunas_categoricas
    )
    
    # Op√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Op√ß√µes avan√ßadas"):
        drop_first = st.checkbox("Remover primeira categoria", value=True)
    
    # Aplicar transforma√ß√£o
    if st.button("Criar Vari√°veis Dummy"):
        try:
            df_dummies = df.copy()
            
            # Verificar cardinalidade
            high_card = [col for col in colunas_selecionadas if df[col].nunique() > 15]
            if high_card:
                st.warning(f"Cuidado com alta cardinalidade em: {', '.join(high_card)}")
            
            # Criar dummies
            df_dummies = pd.get_dummies(
                df_dummies,
                columns=colunas_selecionadas,
                drop_first=drop_first
            )
            
            st.session_state.df_temp = df_dummies.copy()
            st.session_state.show_preview = True
            st.session_state.df = st.session_state.df_temp.copy()
            st.success("Transforma√ß√£o aplicada! Visualize o resultado abaixo.")
            
        except Exception as e:
            st.error(f"Erro: {str(e)}")
    
    # Mostrar pr√©via ap√≥s transforma√ß√£o
    if st.session_state.show_preview:
        st.subheader("Pr√©via dos dados (5 primeiros registros)")
        st.dataframe(st.session_state.df_temp.head())
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚è™ Desfazer"):
                st.session_state.df = st.session_state.df_original_dummies.copy()
                st.session_state.df_temp = st.session_state.df_original_dummies.copy()
                st.rerun()
        
        with col2:
            if st.button("üíæ Gravar Altera√ß√µes"):
                st.session_state.dummies = True
                st.rerun()
    
    return st.session_state.df if 'df' in st.session_state else df